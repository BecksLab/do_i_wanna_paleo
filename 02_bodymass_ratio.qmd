---
title: "Bodymass-ratio"
date: last-modified
format:
    html:
        embed-resources: true
title-block-banner: true
bibliography: references.bib
---

## Overview

This concept of using body mass ratios to determine potential feeding links between species was primarily developed by @rohr2010 and has become quite popular in paleo settings [@yeakel2014; @pires2015]

## Methods

Core idea relates to the ratio between consumer and resource body sizes - which supposedly stems from niche theory (still trying to reconcile that myself). The probability of a link existing between a consumer and resource (in its most basic form) is defined as follows:

$$
P_{ij} = \frac{p}{1+p}
$$

where

$$
p = exp[\alpha + \beta log(\frac{M_{i}}{M_{j}}) + \gamma log^{2}(\frac{M_{i}}{M_{j}})]
$${#eq-bodymass}

The original latent-trait model developed by @rohr2010 also included an additional latent trait term $v_{i} \delta f_{j}$ however for simplicity we will use @eq-bodymass as per @yeakel2014. Based on @rohr2010 it is possible to estimate the parameters $\alpha$, $\delta$, and $\gamma$ using a GLM but we will use the parameters from @yeakel2014, which was 'trained' on the Serengeti food web data and are as follows: $\alpha = 1.41$, $\delta = 3.75$, and $\gamma = 1.87$. 

## Example

```{julia}
#| eval: false

using CSV
using DataFrames
using Distributions

include("lib/bodymass/bodymass.jl")
include("lib/internals.jl")

#Â set seed
import Random
Random.seed!(66)

topology = DataFrame(
    id = Any[],
    model = String[],
    connectance = Float64[],
    complexity = Float64[],
    distance = Float64[],
    basal = Float64[],
    top = Float64[],
    S1 = Float64[],
    S2 = Float64[],
    S4 = Float64[],
    S5 = Float64[],
);

# get the name of all communities
matrix_names = readdir(joinpath("data", "raw"))
matrix_names = replace.(matrix_names, ".csv" => "")

for i in eachindex(matrix_names)
    
    file_name = matrix_names[i]
    df = DataFrame(
        CSV.File.(
            joinpath("data", "raw", "$file_name.csv"),
        ),
    )

    # were going to create some interim bodymass values
    bodymass = rand(Truncated(Normal(0, 1), 0, 1), nrow(df))

    d = model_summary(df, file_name, "bodymassratio"; bodymass = bodymass)

    push!(topology, d)

end

# write summaries as .csv
CSV.write("data/processed/topology_bodymassratio.csv", topology)

```

## References {.unnumbered}

::: {#refs}
:::