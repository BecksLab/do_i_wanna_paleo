{
  "hash": "c545ff4e50d2b7173e81f49becba748b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Bodymass-ratio\"\ndate: last-modified\nformat:\n    html:\n        embed-resources: true\ntitle-block-banner: true\nbibliography: references.bib\n---\n\n## Overview\n\nThis concept of using body mass ratios to determine potential feeding links between species was primarily developed by @rohr2010 and has become quite popular in paleo settings [@yeakel2014; @pires2015]\n\n## Methods\n\nCore idea relates to the ratio between consumer and resource body sizes - which supposedly stems from niche theory (still trying to reconcile that myself). The probability of a link existing between a consumer and resource (in its most basic form) is defined as follows:\n\n$$\nP_{ij} = \\frac{p}{1+p}\n$$\n\nwhere\n\n$$\np = exp[\\alpha + \\beta log(\\frac{M_{i}}{M_{j}}) + \\gamma log^{2}(\\frac{M_{i}}{M_{j}})]\n$${#eq-bodymass}\n\nThe original latent-trait model developed by @rohr2010 also included an additional latent trait term $v_{i} \\delta f_{j}$ however for simplicity we will use @eq-bodymass as per @yeakel2014. Based on @rohr2010 it is possible to estimate the parameters $\\alpha$, $\\delta$, and $\\gamma$ using a GLM but we will use the parameters from @yeakel2014, which was 'trained' on the Serengeti food web data and are as follows: $\\alpha = 1.41$, $\\delta = 3.75$, and $\\gamma = 1.87$. \n\n## Example\n\n::: {#53506efb .cell execution_count=1}\n``` {.julia .cell-code}\nusing CSV\nusing DataFrames\nusing Distributions\n\ninclude(\"lib/bodymass/bodymass.jl\")\ninclude(\"lib/internals.jl\")\n\n#Â set seed\nimport Random\nRandom.seed!(66)\n\ntopology = topo_df();\n\n# get the name of all communities\nmatrix_names = readdir(joinpath(\"data\", \"raw\"))\nmatrix_names = replace.(matrix_names, \".csv\" => \"\")\n\nfor i in eachindex(matrix_names)\n    \n    file_name = matrix_names[i]\n    df = DataFrame(\n        CSV.File.(\n            joinpath(\"data\", \"raw\", \"$file_name.csv\"),\n        ),\n    )\n\n    # were going to create some interim bodymass values\n    bodymass = rand(Truncated(Normal(0, 1), 0, 1), nrow(df))\n\n    d = model_summary(df, file_name, \"bodymassratio\"; bodymass = bodymass)\n\n    push!(topology, d)\n\nend\n\n# write summaries as .csv\nCSV.write(\"data/processed/topology_bodymassratio.csv\", topology)\n```\n:::\n\n\n## References {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "02_bodymass_ratio_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}