{
  "hash": "da6aadb72ef9d1b2da0f279713f6333c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Niche model(s)\"\ndate: last-modified\nformat:\n    html:\n        embed-resources: true\ntitle-block-banner: true\nbibliography: references.bib\n---\n\n## Overview\n\nBroadly, the niche model [@williams2000] is based on the idea that networks follow a trophic hierarchy and that the *structure* of the network can be determined by distributing interactions along single dimension (\\*sensu\\* the “niche axis”; @allesina2008), which is essentially a case of partitioning the species (based on their niches) along a one-dimensional resource. This is possible because there is the underlying assumption that food webs have an expected 'shape' (the standard 'trophic pyramid'), which is constrained by connectence, and so the links between species (i.e the number of links) will be constrained as such. (something about ties to the idea of intervality?)\n\n## Methods\n\nDigging onto the details, the niche model introduces the idea that species interactions are based on the 'feeding niche' of a species. Broadly, all species are randomly assigned a 'feeding niche' range along the resource axis, and all species that fall in the range of a species can be consumed by that species (thereby allowing for cannibalism). The niche of each species is randomly assigned and the range of each species' niche is (in part) also constrained by the specified connectance of the network. The original model itself has undergone some modification, however it appears that adding to the 'complexity' of the niche model does not improve on its ability to generate a more ecologically 'correct' network [@williams2008].\n\n> I guess we can plop the OG schematic of the niche model in here...\n\nAn important feature to keep in mind when it comes to the niche model is that it defines a the nodes of the network as 'trophic species', that is nodes are considered the 'same' because they have the same diet and not because they are of the same taxonomic group, one can also think of nodes to thus represent feeding guilds. Importantly this means that the niche model is 'species agnostic' and it is not possible to recover pairwise links between specific pairs of species as the network itself is not informed by the identity of the species but rather on the assumption that 'trophic species' have a position along the niche axis. Although this way of defining the networks my seem to be a gross oversimplification it does have the advantage that it does not require a lot of data upfront (only species richness and the expected connectance of a network) while (supposedly) granting us a summary of the network structure\n\n> secret aside is that the problem we have with using something like the niche model is that 1) it is not species specific and 2) we are making gross assumptions with regards to what we *suspect* the connectance of paleo food webs are. But maybe we are still going to get similar structural outputs - who knows...\n\n## Example\n\nAlthough the niche model doe snot require that much data it still requires that we make the critical assumption with regards to what we think the connectance of these paleo food webs/communities will look like... Also it means it is not a metric that we can 'track' when is comes to looking at how the networks change across space...\n\nI'm going to use 0.1 for now as a place holder but we will probably have to have a think on this\n\n::: {#8eda8aa4 .cell execution_count=1}\n``` {.julia .cell-code}\nCo = 0.1\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0.1\n```\n:::\n:::\n\n\nAnd now we can run through the motions (so to speak)\n\n::: {#0f46f9b8 .cell execution_count=2}\n``` {.julia .cell-code}\nusing CSV\nusing DataFrames\nusing SpeciesInteractionNetworks\n\ninclude(\"lib/internals.jl\")\n\n# set seed\nimport Random\nRandom.seed!(66)\n\ntopology = DataFrame(\n    id = Any[],\n    model = String[],\n    connectance = Float64[],\n    complexity = Float64[],\n    distance = Float64[],\n    basal = Float64[],\n    top = Float64[],\n    S1 = Float64[],\n    S2 = Float64[],\n    S4 = Float64[],\n    S5 = Float64[],\n);\n\n# get the name of all communities (still need their richness)\nmatrix_names = readdir(joinpath(\"data\", \"raw\"))\nmatrix_names = replace.(matrix_names, \".csv\" => \"\")\n\nfor i in eachindex(matrix_names)\n    \n    file_name = matrix_names[i]\n    df = DataFrame(\n        CSV.File.(\n            joinpath(\"data\", \"raw\", \"$file_name.csv\"),\n        ),\n    )\n\n    d = model_summary(df, file_name, \"niche\"; connectance = Co)\n\n    push!(topology, d)\n\nend\n\n# write summaries as .csv\nCSV.write(\"data/processed/topology_niche.csv\", topology)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n\"data/processed/topology_niche.csv\"\n```\n:::\n:::\n\n\n## References {.unnumbered}\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "06_niche_files"
    ],
    "filters": [],
    "includes": {}
  }
}